# drf vue
# django基础，DRF
# vue, element-ui
# cmdb, zabbix, ansible, sql

# django基础
# 创建用户的两种方式:
# 1. python manage.py createsuperuser
# 2. python manage.py shell ; from django.contrib.auth.models import User
#    User.objects.create_user('wy','wy@yeluotian.com', 'whatisup798')
#    修改密码: user = User.objects.get(username='wy'); user.set_password('wfewfw'); user.save()


# 3.函数视图和类视图
# 4.分页  select * from user limit 0, 10(1-10); select * from user limit 10, 10;(11-20)
#   django: User.objects.all()[0:10] User.objects.all()[10:20]
# Paginator用法
# >>> from django.core.paginator import Paginator
# >>> p = Paginator(User.objects.all(), 10)
# <string>:1: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'django.contrib.auth.models.User'> QuerySet.
# >>> p.count
# 10002
# >>> p.num_pages
# 1001
# >>> p.page_range
# range(1, 1002)
# >>> p1 = p.page(1)
# >>> p1
# <Page 1 of 1001>
# >>> p.page(1001)
# <Page 1001 of 1001>
# >>> p2 = p.page(2)
# >>> p2
# <Page 2 of 1001>
# =>>> p2.object_list
# =>>> print(p2.object_list.query)
# =>>> p3 = p.page(3)
# >>> print(p3.object_list.query)
# =>>> p2.has_previous()
# True
# >>> p2.has_other_pages()
# True
# >>> p2.next_page_number()
# 3
# >>> p2.previous_page_number()
# 1
# >>> p2.start_index()
# 11
# >>> p2.end_index()
# 20

# django日志配置 logging由四个部分组成:记录器Logger,处理程序Handler,过滤器Filter，格式化Formatter

# 模型迁移报错分析： models --> migrations --> django_migrations --> mysql_table

# 数据库操作
# 查询 (exact, iexact,contains,icontains,startswiht,endswith,in)
# >>> user = User.objects.all()
# >>> user.filter(username__exact='wy')
# <QuerySet [<User: wy>]>
# >>> print(user.filter(username__exact='wy'))
# >>> print(user.filter(username__contains='ylt_10'))
# <class 'django.db.models.query.QuerySet'>
# >>> type(User.objects.get(id=2))
# <class 'django.contrib.auth.models.User'>
# >>> User.objects.get(id__exact=2)
# <User: wy>
# >>> User.objects.get(pk=2)
# <User: wy>

# 模型关系: 多对一，多对多，一对一
# Django使用django.db.models.ForeignKey定义多对一关系
# ForeignKey需要一个位置参数来指定本model关联的Model,ForeignKey关联的Model是'一'，ForeignKey所在的model是'多'
# 正向查询(ForeignKey所在的模型查询关联的模型)
# car = Car.objects.get(pk=2); car.manufacturer.all()
# 反向查询(ForeignKey指向的模型查询ForeignKey所在的模型)
# manufacturer = Manufacturer.objects.get(pk=1); manufacturer.cat_set.all()
